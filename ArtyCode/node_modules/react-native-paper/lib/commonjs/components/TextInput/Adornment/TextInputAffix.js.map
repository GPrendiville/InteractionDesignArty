{"version":3,"sources":["TextInputAffix.tsx"],"names":["AFFIX_OFFSET","AffixContext","React","createContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","affix","onLayout","visible","TextInputAffix","text","labelStyle","theme","useContext","textColor","colors","alpha","dark","rgb","string","style","top","styles","container","opacity","interpolate","inputRange","outputRange","displayName","StyleSheet","create","position","justifyContent","alignItems"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA;;AACA;;;;AAEA,MAAMA,YAAY,GAAG,EAArB;;AAoBA,MAAMC,YAAY,gBAAGC,eAAMC,aAAN,CAAkC;AACrDC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,UAAU,EAAE,EAAd;AAAkBC,IAAAA,KAAK,EAAE;AAAzB,GAD0C;AAErDC,EAAAA,WAAW,EAAE,IAFwC;AAGrDC,EAAAA,IAAI,EAAEC,qBAAcC;AAHiC,CAAlC,CAArB;;AAMA,MAAMC,cAKL,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASJ,EAAAA,IAAT;AAAeJ,EAAAA,SAAf;AAA0BG,EAAAA,WAA1B;AAAuCM,EAAAA,QAAvC;AAAiDC,EAAAA;AAAjD,CAAD,KAAgE;AAClE,sBACE,6BAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLN,MAAAA,IADK;AAELJ,MAAAA,SAFK;AAGLG,MAAAA,WAHK;AAILM,MAAAA,QAJK;AAKLC,MAAAA;AALK;AADT,KASGF,KATH,CADF;AAaD,CAnBD;;;;AAqBA,MAAMG,cAAc,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQZ,EAAAA,SAAS,EAAEa,UAAnB;AAA+BC,EAAAA;AAA/B,CAAD,KAAmD;AACxE,QAAM;AAAEd,IAAAA,SAAF;AAAaS,IAAAA,QAAb;AAAuBN,IAAAA,WAAvB;AAAoCC,IAAAA,IAApC;AAA0CM,IAAAA;AAA1C,MAAsDZ,eAAMiB,UAAN,CAC1DlB,YAD0D,CAA5D;;AAGA,QAAMmB,SAAS,GAAG,oBAAMF,KAAK,CAACG,MAAN,CAAaL,IAAnB,EACfM,KADe,CACTJ,KAAK,CAACK,IAAN,GAAa,GAAb,GAAmB,IADV,EAEfC,GAFe,GAGfC,MAHe,EAAlB;AAKA,QAAMC,KAAK,GAAG;AACZC,IAAAA,GAAG,EAAEpB,WADO;AAEZ,KAACC,IAAD,GAAQR;AAFI,GAAd;AAKA,sBACE,6BAAC,qBAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACL4B,MAAM,CAACC,SADF,EAELH,KAFK,EAGL;AACEI,MAAAA,OAAO,EACL,CAAAhB,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEiB,WAAT,CAAqB;AACnBC,QAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADO;AAEnBC,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFM,OAArB,MAGM;AALV,KAHK,CADT;AAYE,IAAA,QAAQ,EAAEpB;AAZZ,kBAcE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAE,CAAC;AAAEP,MAAAA,KAAK,EAAEc;AAAT,KAAD,EAAuBhB,SAAvB,EAAkCa,UAAlC;AAAb,KAA6DD,IAA7D,CAdF,CADF;AAkBD,CAhCD;;;AAiCAD,cAAc,CAACmB,WAAf,GAA6B,iBAA7B;;AAEA,MAAMN,MAAM,GAAGO,wBAAWC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,QAAQ,EAAE,UADD;AAETC,IAAAA,cAAc,EAAE,QAFP;AAGTC,IAAAA,UAAU,EAAE;AAHH;AADoB,CAAlB,CAAf;;eAQe,wBAAUxB,cAAV,C,EAEf","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({ affix, side, textStyle, topPosition, onLayout, visible }) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle, labelStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]}