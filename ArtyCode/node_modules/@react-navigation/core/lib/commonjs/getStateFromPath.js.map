{"version":3,"sources":["getStateFromPath.tsx"],"names":["getStateFromPath","path","options","legacy","compatOptions","initialRoutes","initialRouteName","push","connectedRoutes","Object","keys","screens","remaining","replace","endsWith","undefined","routes","split","filter","Boolean","map","segment","i","self","name","decodeURIComponent","length","params","parseQueryParams","createNestedStateObject","configs","concat","key","createNormalizedConfigs","sort","a","b","pattern","routeNames","join","localeCompare","startsWith","aParts","bParts","aWildcardIndex","indexOf","bWildcardIndex","reduce","acc","config","intersects","every","it","Error","assign","match","find","c","screen","parse","result","current","allParams","remainingPath","matchAgainstConfigs","regex","RegExp","source","createRouteObjects","segments","shift","state","index","route","findFocusedRoute","findParseConfigForRoute","joinPaths","paths","p","paramPatterns","value","routeConfig","initials","parentPattern","createConfigItem","exact","forEach","nestedConfig","pop","routeName","flatConfig","findInitialRoute","includes","createStateObject","initialRoute","isEmpty","nestedState","nestedStateIndex","parseConfig","query","queryString"],"mappings":"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","sourcesContent":["import escape from 'escape-string-regexp';\nimport * as queryString from 'query-string';\nimport type {\n  NavigationState,\n  PartialState,\n  InitialState,\n} from '@react-navigation/routers';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\nimport type { PathConfigMap } from './types';\n\ntype Options = {\n  initialRouteName?: string;\n  screens: PathConfigMap;\n};\n\ntype ParseConfig = Record<string, (value: string) => any>;\n\ntype RouteConfig = {\n  screen: string;\n  regex?: RegExp;\n  path: string;\n  pattern: string;\n  routeNames: string[];\n  parse?: ParseConfig;\n};\n\ntype InitialRouteConfig = {\n  initialRouteName: string;\n  connectedRoutes: string[];\n};\n\ntype ResultState = PartialState<NavigationState> & {\n  state?: ResultState;\n};\n\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * @example\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\nexport default function getStateFromPath(\n  path: string,\n  options?: Options\n): ResultState | undefined {\n  const [legacy, compatOptions] = checkLegacyPathConfig(options);\n\n  let initialRoutes: InitialRouteConfig[] = [];\n\n  if (compatOptions?.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens),\n    });\n  }\n\n  const screens = compatOptions?.screens;\n\n  let remaining = path\n    .replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n    .replace(/^\\//, '') // Remove extra leading slash\n    .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n\n  // Make sure there is a trailing slash\n  remaining = remaining.endsWith('/') ? remaining : `${remaining}/`;\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining\n      .split('/')\n      .filter(Boolean)\n      .map((segment, i, self) => {\n        const name = decodeURIComponent(segment);\n\n        if (i === self.length - 1) {\n          return { name, params: parseQueryParams(path) };\n        }\n\n        return { name };\n      });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  // Create a normalized configs array which will be easier to use\n  const configs = ([] as RouteConfig[])\n    .concat(\n      ...Object.keys(screens).map((key) =>\n        createNormalizedConfigs(\n          legacy,\n          key,\n          screens as PathConfigMap,\n          [],\n          initialRoutes\n        )\n      )\n    )\n    .sort((a, b) => {\n      // Sort config so that:\n      // - the most exhaustive ones are always at the beginning\n      // - patterns with wildcard are always at the end\n\n      // If 2 patterns are same, move the one with less route names up\n      // This is an error state, so it's only useful for consistent error messages\n      if (a.pattern === b.pattern) {\n        return b.routeNames.join('>').localeCompare(a.routeNames.join('>'));\n      }\n\n      // If one of the patterns starts with the other, it's more exhaustive\n      // So move it up\n      if (a.pattern.startsWith(b.pattern)) {\n        return -1;\n      }\n\n      if (b.pattern.startsWith(a.pattern)) {\n        return 1;\n      }\n\n      const aParts = a.pattern.split('/');\n      const bParts = b.pattern.split('/');\n\n      const aWildcardIndex = aParts.indexOf('*');\n      const bWildcardIndex = bParts.indexOf('*');\n\n      // If only one of the patterns has a wildcard, move it down in the list\n      if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n        return -1;\n      }\n\n      if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n        return 1;\n      }\n\n      if (aWildcardIndex === bWildcardIndex) {\n        // If `b` has more `/`, it's more exhaustive\n        // So we move it up in the list\n        return bParts.length - aParts.length;\n      }\n\n      // If the wildcard appears later in the pattern (has higher index), it's more specific\n      // So we move it up in the list\n      return bWildcardIndex - aWildcardIndex;\n    });\n\n  // Check for duplicate patterns in the config\n  configs.reduce<Record<string, RouteConfig>>((acc, config) => {\n    if (acc[config.pattern]) {\n      const a = acc[config.pattern].routeNames;\n      const b = config.routeNames;\n\n      // It's not a problem if the path string omitted from a inner most screen\n      // For example, it's ok if a path resolves to `A > B > C` or `A > B`\n      const intersects =\n        a.length > b.length\n          ? b.every((it, i) => a[i] === it)\n          : a.every((it, i) => b[i] === it);\n\n      if (!intersects) {\n        throw new Error(\n          `Found conflicting screens with the same pattern. The pattern '${\n            config.pattern\n          }' resolves to both '${a.join(' > ')}' and '${b.join(\n            ' > '\n          )}'. Patterns must be unique and cannot resolve to more than one screen.`\n        );\n      }\n    }\n\n    return Object.assign(acc, {\n      [config.pattern]: config,\n    });\n  }, {});\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(\n      (config) =>\n        config.path === '' &&\n        config.routeNames.every(\n          // Make sure that none of the parent configs have a non-empty path defined\n          (name) => !configs.find((c) => c.screen === name)?.path\n        )\n    );\n\n    if (match) {\n      return createNestedStateObject(\n        match.routeNames.map((name, i, self) => {\n          if (i === self.length - 1) {\n            return { name, params: parseQueryParams(path, match.parse) };\n          }\n\n          return { name };\n        }),\n        initialRoutes\n      );\n    }\n\n    return undefined;\n  }\n\n  let result: PartialState<NavigationState> | undefined;\n  let current: PartialState<NavigationState> | undefined;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n      remaining,\n      configs.map((c) => ({\n        ...c,\n        // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n        regex: c.regex ? new RegExp(c.regex.source + '$') : undefined,\n      }))\n    );\n\n    if (routeNames !== undefined) {\n      // This will always be empty if full path matched\n      remaining = remainingPath;\n      current = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let { routeNames, allParams, remainingPath } = matchAgainstConfigs(\n        remaining,\n        configs\n      );\n\n      remaining = remainingPath;\n\n      // If we hadn't matched any segments earlier, use the path as route name\n      if (routeNames === undefined) {\n        const segments = remaining.split('/');\n\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(\n        createRouteObjects(configs, routeNames, allParams),\n        initialRoutes\n      );\n\n      if (current) {\n        // The state should be nested inside the deepest route we parsed before\n        while (current?.routes[current.index || 0].state) {\n          current = current.routes[current.index || 0].state;\n        }\n\n        (current as PartialState<NavigationState>).routes[\n          current?.index || 0\n        ].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(\n    path,\n    findParseConfigForRoute(route.name, configs)\n  );\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = { ...route.params, ...params };\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths: string[]): string =>\n  ([] as string[])\n    .concat(...paths.map((p) => p.split('/')))\n    .filter(Boolean)\n    .join('/');\n\nconst matchAgainstConfigs = (remaining: string, configs: RouteConfig[]) => {\n  let routeNames: string[] | undefined;\n  let allParams: Record<string, any> | undefined;\n  let remainingPath = remaining;\n\n  // Go through all configs, and see if the next path segment matches our regex\n  for (const config of configs) {\n    if (!config.regex) {\n      continue;\n    }\n\n    const match = remainingPath.match(config.regex);\n\n    // If our regex matches, we need to extract params from the path\n    if (match) {\n      routeNames = [...config.routeNames];\n\n      const paramPatterns = config.pattern\n        .split('/')\n        .filter((p) => p.startsWith(':'));\n\n      if (paramPatterns.length) {\n        allParams = paramPatterns.reduce<Record<string, any>>((acc, p, i) => {\n          const value = match![(i + 1) * 2].replace(/\\//, ''); // The param segments appear every second item starting from 2 in the regex match result\n\n          acc[p] = value;\n\n          return acc;\n        }, {});\n      }\n\n      remainingPath = remainingPath.replace(match[1], '');\n\n      break;\n    }\n  }\n\n  return { routeNames, allParams, remainingPath };\n};\n\nconst createNormalizedConfigs = (\n  legacy: boolean,\n  screen: string,\n  routeConfig: PathConfigMap,\n  routeNames: string[] = [],\n  initials: InitialRouteConfig[],\n  parentPattern?: string\n): RouteConfig[] => {\n  const configs: RouteConfig[] = [];\n\n  routeNames.push(screen);\n\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern: string | undefined;\n\n    // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern =\n          config.exact !== true && parentPattern\n            ? joinPaths(parentPattern, config.path)\n            : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\n            \"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\"\n          );\n        }\n\n        pattern =\n          config.exact !== true\n            ? joinPaths(parentPattern || '', config.path || '')\n            : config.path || '';\n      }\n\n      configs.push(\n        createConfigItem(\n          legacy,\n          screen,\n          routeNames,\n          pattern,\n          config.path,\n          config.parse\n        )\n      );\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens),\n        });\n      }\n\n      Object.keys(config.screens).forEach((nestedConfig) => {\n        const result = createNormalizedConfigs(\n          legacy,\n          nestedConfig,\n          config.screens as PathConfigMap,\n          routeNames,\n          initials,\n          pattern ?? parentPattern\n        );\n\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n\n  return configs;\n};\n\nconst createConfigItem = (\n  legacy: boolean,\n  screen: string,\n  routeNames: string[],\n  pattern: string,\n  path: string,\n  parse?: ParseConfig\n): RouteConfig => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n\n  const regex = pattern\n    ? new RegExp(\n        `^(${pattern\n          .split('/')\n          .map((it) => {\n            if (legacy && it === '*') {\n              throw new Error(\n                \"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\"\n              );\n            }\n\n            if (it.startsWith(':')) {\n              return `(([^/]+\\\\/)${it.endsWith('?') ? '?' : ''})`;\n            }\n\n            return `${it === '*' ? '.*' : escape(it)}\\\\/`;\n          })\n          .join('')})`\n      )\n    : undefined;\n\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse,\n  };\n};\n\nconst findParseConfigForRoute = (\n  routeName: string,\n  flatConfig: RouteConfig[]\n): ParseConfig | undefined => {\n  for (const config of flatConfig) {\n    if (routeName === config.routeNames[config.routeNames.length - 1]) {\n      return config.parse;\n    }\n  }\n\n  return undefined;\n};\n\n// Try to find an initial route connected with the one passed\nconst findInitialRoute = (\n  routeName: string,\n  initialRoutes: InitialRouteConfig[]\n): string | undefined => {\n  for (const config of initialRoutes) {\n    if (config.connectedRoutes.includes(routeName)) {\n      return config.initialRouteName === routeName\n        ? undefined\n        : config.initialRouteName;\n    }\n  }\n  return undefined;\n};\n\n// returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\nconst createStateObject = (\n  initialRoute: string | undefined,\n  routeName: string,\n  params: Record<string, any> | undefined,\n  isEmpty: boolean\n): InitialState => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{ name: initialRoute }, { name: routeName as string, params }],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params }],\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [\n          { name: initialRoute },\n          { name: routeName as string, params, state: { routes: [] } },\n        ],\n      };\n    } else {\n      return {\n        routes: [{ name: routeName as string, params, state: { routes: [] } }],\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (\n  routes: { name: string; params?: object }[],\n  initialRoutes: InitialRouteConfig[]\n) => {\n  let state: InitialState;\n  let route = routes.shift() as { name: string; params?: object };\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n\n  state = createStateObject(\n    initialRoute,\n    route.name,\n    route.params,\n    routes.length === 0\n  );\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while ((route = routes.shift() as { name: string; params?: object })) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n\n      const nestedStateIndex =\n        nestedState.index || nestedState.routes.length - 1;\n\n      nestedState.routes[nestedStateIndex].state = createStateObject(\n        initialRoute,\n        route.name,\n        route.params,\n        routes.length === 0\n      );\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex]\n          .state as InitialState;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst createRouteObjects = (\n  configs: RouteConfig[],\n  routeNames: string[],\n  allParams?: Record<string, any>\n) =>\n  routeNames.map((name) => {\n    const config = configs.find((c) => c.screen === name);\n\n    let params: object | undefined;\n\n    if (allParams && config?.path) {\n      const pattern = config.path;\n\n      if (pattern) {\n        const paramPatterns = pattern\n          .split('/')\n          .filter((p) => p.startsWith(':'));\n\n        if (paramPatterns.length) {\n          params = paramPatterns.reduce<Record<string, any>>((acc, p) => {\n            const key = p.replace(/^:/, '').replace(/\\?$/, '');\n            const value = allParams![p];\n\n            if (value) {\n              acc[key] = config.parse?.[key] ? config.parse[key](value) : value;\n            }\n\n            return acc;\n          }, {});\n        }\n      }\n    }\n\n    if (params && Object.keys(params).length) {\n      return { name, params };\n    }\n\n    return { name };\n  });\n\nconst findFocusedRoute = (state: InitialState) => {\n  let current: InitialState | undefined = state;\n\n  while (current?.routes[current.index || 0].state) {\n    // The query params apply to the deepest route\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = (current as PartialState<NavigationState>).routes[\n    current?.index || 0\n  ];\n\n  return route;\n};\n\nconst parseQueryParams = (\n  path: string,\n  parseConfig?: Record<string, (value: string) => any>\n) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach((name) => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name] as string);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};\n"]}